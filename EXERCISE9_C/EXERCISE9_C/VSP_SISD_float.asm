; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30141.0 

	TITLE	C:\PROJEKTE\EEP_USER\EXERCISE9_SSE_ASM\VSP_SISD_float_G.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_vector_af:DWORD:08H
COMM	_vector_bf:DWORD:08H
_DATA	ENDS
msvcjmc	SEGMENT
__61826FC6_VSP_SISD_float_G@c DB 01H
msvcjmc	ENDS
PUBLIC	_main
PUBLIC	__JustMyCode_Default
EXTRN	__imp__srand:PROC
EXTRN	__imp__rand:PROC
EXTRN	_time:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__ftoui3:PROC
EXTRN	__fltused:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
;__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
;__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\PROJEKTE\EEP_USER\EXERCISE9_SSE_ASM\VSP_SISD_float_G.c
;	COMDAT _main
_TEXT	SEGMENT
_VDP_f$ = -40						; size = 12
_i$ = -8						; size = 4
_main	PROC						; COMDAT

; 40   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 236				; 000000ecH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __61826FC6_VSP_SISD_float_G@c
	call	@__CheckForDebuggerJustMyCode@4

; 41   : 
; 42   : 	int i;
; 43   : 	float dp_f, VDP_f[3];
; 44   : 
; 45   : 
; 46   : 	/**/
; 47   : 	// Initialize DATA STRUCTURE  for Vector Scalar Product with Sequential/SSE Streaming Data instructions FLOAT
; 48   : 	srand((float)time(NULL));

	push	0
	call	_time
	add	esp, 4
	cvtsi2ss xmm0, eax
	call	__ftoui3
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__srand
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 49   : 	for (i = 0; i < dim_float; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@main:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN3@main

; 50   : 		vector_af[i] = rand() / 1000;

	mov	esi, esp
	call	DWORD PTR __imp__rand
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	cvtsi2ss xmm0, eax
	mov	edx, DWORD PTR _i$[ebp]
	movss	DWORD PTR _vector_af[edx*4], xmm0

; 51   : 		vector_bf[i] = rand() / 1000;

	mov	esi, esp
	call	DWORD PTR __imp__rand
	cmp	esi, esp
	call	__RTC_CheckEsp
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	ecx
	cvtsi2ss xmm0, eax
	mov	edx, DWORD PTR _i$[ebp]
	movss	DWORD PTR _vector_bf[edx*4], xmm0

; 52   : 	}

	jmp	SHORT $LN2@main
$LN3@main:

; 53   : 
; 54   : 	/**/
; 55   : 	for (i = 0; i < 3; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@main
$LN5@main:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@main:
	cmp	DWORD PTR _i$[ebp], 3
	jge	SHORT $LN6@main

; 56   : 		VDP_f[i] = 0.0;

	mov	eax, DWORD PTR _i$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR _VDP_f$[ebp+eax*4], xmm0

; 57   : 	}

	jmp	SHORT $LN5@main
$LN6@main:

; 58   : 
; 59   : 	// Sequential code, data type float
; 60   : 	/**/
; 61   : 	for (i = 0; i < dim_float; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@main
$LN8@main:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@main:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN9@main

; 62   : 		VDP_f[0] += vector_af[i] * vector_bf[i];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _vector_af[edx*4]
	mulss	xmm0, DWORD PTR _vector_bf[eax*4]
	addss	xmm0, DWORD PTR _VDP_f$[ebp+ecx]
	mov	ecx, 4
	imul	edx, ecx, 0
	movss	DWORD PTR _VDP_f$[ebp+edx], xmm0

; 63   : 	}

	jmp	SHORT $LN8@main
$LN9@main:

; 64   : 
; 65   : 	//printf("\nFLOAT VECTOR DOT PRODUCT SISD SISD   = %.3f\n", VDP_f[0]);
; 66   : }

	xor	eax, eax
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@main
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@main:
	DD	1
	DD	$LN13@main
$LN13@main:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN12@main
$LN12@main:
	DB	86					; 00000056H
	DB	68					; 00000044H
	DB	80					; 00000050H
	DB	95					; 0000005fH
	DB	102					; 00000066H
	DB	0
_main	ENDP
_TEXT	ENDS
END
